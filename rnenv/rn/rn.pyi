"""
stub file for rn.py
"""

from numpy import ndarray
from typing import Tuple, List
from fractions import Fraction
from decimal import Decimal


def rn(*args: Tuple[int] or
              Tuple[int, int] or
              Tuple[float] or
              Tuple[Fraction] or
              Tuple[Decimal], index: int or RN=1) -> RN: ...

class RN:
    PERMITTED_PARAMETERS = ...  # type: tuple
    ARRAY_SIZES = ...  # type: tuple
    ARRAY_DIM = ...  # type: int
    PERMITTED_UNITS = ...  # type: tuple
    PERMITTED_INDEXES = ...  # type: tuple

    COMPATIBLE_TYPES = ...  # type: tuple

    array = ...  # type: ndarray
    __cls = ...  # type: List[str, str, str]
    __str = ...  # type: str

    def __init__(self, array: ndarray): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

    @property
    def num(self) -> ndarray: return
    @property
    def den(self) -> ndarray: return
    @property
    def index(self) -> int or RN: return
    @property
    def cls(self) -> List[str, str, str]: return

    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __bool__(self) -> bool: ...

    def __ne__(self, other: RN or int or float) -> bool: ...
    def __eq__(self, other: RN or int or float) -> bool: ...
    def __gt__(self, other: RN or int or float) -> bool: ...
    def __ge__(self, other: RN or int or float) -> bool: ...
    def __lt__(self, other: RN or int or float) -> bool: ...
    def __le__(self, other: RN or int or float) -> bool: ...

    def __neg__(self) -> RN: ...
    def __abs__(self) -> RN: ...
    def __add__(self, other: RN or int or float) -> RN: ...
    def __sub__(self, other: RN or int or float) -> RN: ...
    def __mul__(self, other: RN or int or float) -> RN: ...
    def __truediv__(self, other: RN or int or float) -> RN: ...
    def __floordiv__(self, other: RN or int or float) -> RN: ...
    def __pow__(self, power: RN or int or float, module=None) -> RN: ...

    def __validate_array(self, array: ndarray) -> None: ...
    def __validate_den(self, array: ndarray) -> None: ...
    def __validate_array_type(self, array: ndarray) -> None: ...
    def __validate_array_sizes_conformity(self, array: ndarray) -> None: ...
    def __validate_array_data_types(self, array: ndarray) -> None: ...
    def __classify(self) -> List[str, str, str]: ...
    @staticmethod
    def __reduce(array: array) -> ndarray: ...
