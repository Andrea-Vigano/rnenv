"""
rn.py stubs
"""
from abc import ABCMeta, abstractmethod, ABC
from typing import Tuple, Callable


class RN:
    PERMITTED_OPERATIONS = ...  # type: Tuple[type, ...]

    op = ...  # type: None or type
    terms = ...  # type: Tuple[int or RN, ...]

    def __init__(self, op: None or type=None, *terms: Tuple[int or RN]) -> object: ...
    # string representations
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    # data casing
    def __int__(self) -> int: ...
    # operations
    # arithmetic operations
    def __add__(self, other: RN) -> RN: ...
    def __sub__(self, other: RN) -> RN: ...
    def __mul__(self, other: RN) -> RN: ...
    def __truediv__(self, other: RN) -> RN: ...
    def __floordiv__(self, other: RN) -> RN: ...
    def __pow__(self, other: RN) -> RN: ...
    def __matmul__(self, other: RN) -> RN: ...
class Operation(metaclass=ABCMeta):
    PERMITTED_OPERANDS = (int, RN)  # type: Tuple[type, ...]
    OPERANDS_NUMBER = ...  # type: int
    OPERATOR = ...  # type: str

    terms = ...  # type: Tuple[RN, ...]

    def __init__(self, *terms): ...
    def __validate_terms(self, terms: Tuple[int or RN, ...]) -> None: ...
    @staticmethod
    @abstractmethod
    def string(terms: Tuple[int or RN, ...]) -> str: ...
    def rv(self) -> RN: ...
class ArithmeticOperation(Operation ,ABC):
    OPERANDS_NUMBER = 2  # type: int
    def __validate_terms(self, terms: Tuple[int or RN, ...]) -> None: ...
    @classmethod
    def string_builder(cls) -> Callable: ...
    def rv(self) -> RN: ...
